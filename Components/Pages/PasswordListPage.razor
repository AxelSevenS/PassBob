@page "/list"
@inject NavigationManager Navigation

<h3>Liste des Mots de Passe</h3>

@if (passwords != null) {
	<ul>
		@foreach (Password password in passwords) {
			<li>
				Site: <strong>@password.Website</strong> | Nom d'Utilisateur: <strong>@password.Username</strong>
				<button @onclick="() => ShowPassword(password)">
					Afficher en Clair
				</button>
				<button @onclick="() => EditPassword(password)">
					Modifier
				</button>
				<button @onclick="() => DeletePassword(password)">
					Supprimer
				</button>
				@if (visiblePassword == password) {
					<div>@password.DecryptedPassword</div>
				}
				@if (editedPassword == password) {
					<EditForm Model="@password" OnValidSubmit="() => UpdatePassword(password)">
						<DataAnnotationsValidator />
						<ValidationSummary />
						<div>
							<label for="password">Site:</label>
							<InputText id="password" @bind-Value="password.Website" type="url" />
						</div>
						<div>
							<label for="password">Nom d'Utilisateur:</label>
							<InputText id="password" @bind-Value="password.Username" type="text" />
						</div>
						<div>
							<label for="password">Mot de Passe:</label>
							<InputText id="password" @bind-Value="password.DecryptedPassword" type="password" />
						</div>
						<button type="submit">Sauvegarder</button>
					</EditForm>
				}
			</li>
		}
	</ul>
}

@code {
	private List<Password> passwords;
	private Password? editedPassword;
	private Password? visiblePassword;

	protected override async Task OnInitializedAsync() {
		string? masterKey = PasswordDatabase.MasterKey;

		if (string.IsNullOrEmpty(masterKey)) {
			Navigation.NavigateTo("/login");
		}

		passwords = await PasswordDatabase.GetPasswordsAsync();
	}

	private void EditPassword(Password password) {
		editedPassword = editedPassword == password ? null : password;
	}

	private void ShowPassword(Password password) {
		visiblePassword = visiblePassword == password ? null : password;
	}

	private async Task DeletePassword(Password password) {
		await PasswordDatabase.DeletePasswordAsync(password);
		passwords.Remove(password);
	}

	private async Task UpdatePassword(Password password) {
		await PasswordDatabase.SavePasswordAsync(password);
	}
}
